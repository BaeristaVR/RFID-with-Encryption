#include <Arduino.h>
#include <ESP8266WiFi.h>
#include <SPI.h>
#include <MFRC522.h>
#include <HTTPSRedirect.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
#include <AESLib.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);

//---------------------------------------------------------------------------------------------------------
// Enter Google Script Deployment ID:
const char *GScriptId = "AKfycbwhGJHx4ciJRMjRSeOIPzlTWbDAJBhpEbDz93T4dmO58ycMqjLIWOU041C-VlWxwVfXCQ";
//---------------------------------------------------------------------------------------------------------
// Enter network credentials:
const char* ssid = "Manangcayal123";
const char* password = "dacueno7";
//---------------------------------------------------------------------------------------------------------
// Enter command (insert_row or append_row) and your Google Sheets sheet name (default is Sheet1):
String payload_base =  "{\"command\": \"insert_row\", \"sheet_name\": \"Sheet1\", \"values\": ";
String payload = "";
//---------------------------------------------------------------------------------------------------------
// Google Sheets setup (do not edit)
const char* host = "script.google.com";
const int   httpsPort = 443;
String url = String("/macros/s/") + GScriptId + "/exec";
HTTPSRedirect* client = nullptr;
//------------------------------------------------------------
// Declare variables that will be published to Google Sheets
String student_id;
//------------------------------------------------------------
int blocks[] = {4,5,6,8,9};
#define total_blocks  (sizeof(blocks) / sizeof(blocks[0]))
//------------------------------------------------------------
#define RST_PIN  0  //D3
#define SS_PIN   2  //D4
#define BUZZER   4  //D0
//------------------------------------------------------------
MFRC522 mfrc522(SS_PIN, RST_PIN);
MFRC522::MIFARE_Key key;  
MFRC522::StatusCode status;
//------------------------------------------------------------
int blockNum = 2;  
byte bufferLen = 18;
byte readBlockData[18];
//------------------------------------------------------------

AESLib aesLib;
byte aes_key[] = {0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30, 0x61, 0x62, 0x63, 0x64, 0x65, 0x66};  // "1234567890abcdef"
byte aes_iv[]  = {0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x30};  // "abcdef1234567890"

//---------------------------------------------------------------------------------------------------------
void setup() {
  Serial.begin(9600);        
  delay(10);
  SPI.begin();
  lcd.begin();
  lcd.backlight();
  lcd.clear();
  lcd.setCursor(0,0); 
  lcd.print("Connecting to");
  lcd.setCursor(0,1); 
  lcd.print("WiFi...");
  
  WiFi.begin(ssid, password);             
  while (WiFi.status() != WL_CONNECTED) {
    delay(1000);
    Serial.print(".");
  }
  Serial.println("WiFi Connected!");
  Serial.println(WiFi.localIP());

  client = new HTTPSRedirect(httpsPort);
  client->setInsecure();
  client->setPrintResponseBody(true);
  client->setContentTypeHeader("application/json");

  lcd.clear();
  lcd.setCursor(0,0); 
  lcd.print("Connecting to");
  lcd.setCursor(0,1); 
  lcd.print("Google ");
  delay(5000);

  Serial.print("Connecting to ");
  Serial.println(host);
  
  bool flag = false;
  for(int i=0; i<5; i++){ 
    int retval = client->connect(host, httpsPort);
    if (retval == 1){
      flag = true;
      String msg = "Connected. OK";
      Serial.println(msg);
      lcd.clear();
      lcd.setCursor(0,0); 
      lcd.print(msg);
      delay(2000);
      break;
    } else {
      Serial.println("Connection failed. Retrying...");
    }
  }
  
  if (!flag){
    lcd.clear();
    lcd.setCursor(0,0); 
    lcd.print("Connection fail");
    Serial.print("Could not connect to server: ");
    Serial.println(host);
    delay(5000);
    return;
  }
  delete client;    
  client = nullptr;
}

/*void loop() {
  static bool flag = false;
  if (!flag){
    client = new HTTPSRedirect(httpsPort);
    client->setInsecure();
    flag = true;
    client->setPrintResponseBody(true);
    client->setContentTypeHeader("application/json");
  }

  if (client != nullptr){
    if (!client->connected()){
      int retval = client->connect(host, httpsPort);
      if (retval != 1){
        Serial.println("Disconnected. Retrying...");
        lcd.clear();
        lcd.setCursor(0,0); 
        lcd.print("Disconnected.");
        lcd.setCursor(0,1); 
        lcd.print("Retrying...");
        return;
      }
    }
  } else {
    Serial.println("Error creating client object!");
  }

  lcd.clear();
  lcd.setCursor(0,0); 
  lcd.print("Scan your Tag");

  mfrc522.PCD_Init();
  if ( ! mfrc522.PICC_IsNewCardPresent()) { return; }
  if ( ! mfrc522.PICC_ReadCardSerial()) { return; }

  String values = "", data;

  for (byte i = 0; i < total_blocks; i++) {
    ReadDataFromBlock(blocks[i], readBlockData);
    if(i == 0){
      data = String((char*)readBlockData);
      data.trim();
      student_id = data;


    }
  }
  //values += "Gate1\"}";
 // payload = payload_base + values;
    values = "[\"Gate1\"]}";  // Properly formatted as a JSON array
    payload = payload_base + values;


  lcd.clear();
  lcd.setCursor(0,0); 
  lcd.print("Publishing Data");
  lcd.setCursor(0,1); 
  lcd.print("Please Wait...");

  Serial.println("Publishing data...");
  Serial.println(payload);
  
  if(client->POST(url, host, payload)){ 
    Serial.println("[OK] Data published.");
    lcd.clear();
    lcd.setCursor(0,0); 
    lcd.print("Student ID: "+student_id);
    lcd.setCursor(0,1); 
    lcd.print("Thanks");
  }
  else {
    Serial.println("Error while connecting");
    lcd.clear();
    lcd.setCursor(0,0); 
    lcd.print("Failed.");
    lcd.setCursor(0,1); 
    lcd.print("Try Again");
  }

  delay(5000);
}
*/
//mmmmmmm
void loop() {
  static bool flag = false;
  if (!flag){
    client = new HTTPSRedirect(httpsPort);
    client->setInsecure();
    flag = true;
    client->setPrintResponseBody(true);
    client->setContentTypeHeader("application/json");
  }

  if (client != nullptr){
    if (!client->connected()){
      int retval = client->connect(host, httpsPort);
      if (retval != 1){
        Serial.println("Disconnected. Retrying...");
        lcd.clear();
        lcd.setCursor(0,0); 
        lcd.print("Disconnected.");
        lcd.setCursor(0,1); 
        lcd.print("Retrying...");
        return;
      }
    }
  } else {
    Serial.println("Error creating client object!");
  }

  lcd.clear();
  lcd.setCursor(0,0); 
  lcd.print("Scan your Tag");

  mfrc522.PCD_Init();
  if ( ! mfrc522.PICC_IsNewCardPresent()) { return; }
  if ( ! mfrc522.PICC_ReadCardSerial()) { return; }

  String values = "", data;

  for (byte i = 0; i < total_blocks; i++) {
    ReadDataFromBlock(blocks[i], readBlockData);
    if(i == 0){
      data = String((char*)readBlockData);
      data.trim();
      student_id = data;
    }
  }
  
  // Properly format values for JSON
  values = "[\"Gate1\", \"" + student_id + "\"]";  // Adding student_id to values

  // Build the payload
 // payload = payload_base + values + "}";  // Ensure correct closure of JSON
 values = "[\"Gate1\", \"" + student_id + "\"]";  // Ensuring clean student_id
payload = payload_base + values + "}";


  lcd.clear();
  lcd.setCursor(0,0); 
  lcd.print("Publishing Data");
  lcd.setCursor(0,1); 
  lcd.print("Please Wait...");

  Serial.println("Publishing data...");
  Serial.println(payload);
  
  if(client->POST(url, host, payload)){ 
    Serial.println("[OK] Data published.");
    lcd.clear();
    lcd.setCursor(0,0); 
    lcd.print("Student ID: "+student_id);
    lcd.setCursor(0,1); 
    lcd.print("Thanks");
  }
  else {
    Serial.println("Error while connecting");
    lcd.clear();
    lcd.setCursor(0,0); 
    lcd.print("Failed.");
    lcd.setCursor(0,1); 
    lcd.print("Try Again");
  }

  delay(5000);
}



void ReadDataFromBlock(int blockNum, byte readBlockData[]) { 
  for (byte i = 0; i < 6; i++) {
    key.keyByte[i] = 0xFF;
  }

  status = mfrc522.PCD_Authenticate(MFRC522::PICC_CMD_MF_AUTH_KEY_A, blockNum, &key, &(mfrc522.uid));
  if (status != MFRC522::STATUS_OK){
     Serial.print("Authentication failed for Read: ");
     Serial.println(mfrc522.GetStatusCodeName(status));
     return;
  }

  status = mfrc522.MIFARE_Read(blockNum, readBlockData, &bufferLen);
  if (status != MFRC522::STATUS_OK) {
    Serial.print("Reading failed: ");
    Serial.println(mfrc522.GetStatusCodeName(status));
    return;
  }
}
